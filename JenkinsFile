pipeline {
    agent any

    environment {
        REPO_DIR = "bts_repo_ex"
        API_URL = "http://192.168.2.141:8088/bts/jenkins/getCommits"
    }

    stages {
        stage("Init") {
            steps {
                sh '''
                    if [ ! -d "${REPO_DIR}/.git" ]; then
                        echo "‚ö†Ô∏è Git Ï†ÄÏû•ÏÜå ÏóÜÏùå ‚Äî ÏÉàÎ°ú clone Ìï©ÎãàÎã§."
                        git clone https://github.com/lsb06111/bts_repo_ex.git
                    else
                        echo "‚úÖ Í∏∞Ï°¥ Ï†ÄÏû•ÏÜå Ï°¥Ïû¨"
                    fi
                '''
            }
        }

        stage("Selective Pull") {
            steps {
                dir("${REPO_DIR}") {
                    sh '''
                        echo "üì° Ïª§Î∞ã Ï†ïÎ≥¥ API Ìò∏Ï∂ú Ï§ë..."
                        curl -s ${API_URL} -o commits.json

                        echo "üìÅ Ïª§Î∞ã ÌååÏùº Î™©Î°ù:"
                        cat commits.json

                        git fetch origin main

                        # jq ÏÇ¨Ïö©: Í∞Å Ïª§Î∞ãÏùò sha, fileName Ï∂îÏ∂ú
                        jq -c '.[]' commits.json | while read -r item; do
                            SHA=$(echo $item | jq -r '.sha')
                            FILE=$(echo $item | jq -r '.fileName')

                            echo "=============================================="
                            echo "SHA: $SHA"
                            echo "File: $FILE"
                            echo "----------------------------------------------"

                            # ÌååÏùºÏù¥ Ï°¥Ïû¨ÌïòÎäî Ïª§Î∞ãÏù∏ÏßÄ ÌôïÏù∏
                            if git cat-file -e ${SHA} 2>/dev/null; then
                                echo "‚úÖ Ïª§Î∞ã Ï°¥Ïû¨ ‚Äî Ìï¥Îãπ ÌååÏùº checkout"
                                git checkout ${SHA} -- "${FILE}"
                            else
                                echo "‚ö†Ô∏è Ïª§Î∞ã ${SHA} Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏùå ‚Äî Ïä§ÌÇµ"
                            fi
                        done
                    '''
                }
            }
        }

        stage("Permission") {
            steps {
                dir("${REPO_DIR}") {
                    sh 'chmod u+x mvnw'
                }
            }
        }

        stage("Clean") {
            steps {
                dir("${REPO_DIR}") {
                    sh './mvnw clean'
                }
            }
        }

        stage("Build") {
            steps {
                dir("${REPO_DIR}") {
                    sh './mvnw package -DskipTests'
                }
            }
        }

        stage("Server start") {
            steps {
                dir("${REPO_DIR}") {
                    sh '''
                        #!/bin/bash
                        set -e
                        
                        if [ -f app.pid ]; then
                            PID=$(cat app.pid)
                            if kill -0 $PID 2>/dev/null; then
                                echo "Í∏∞Ï°¥ ÌîÑÎ°úÏÑ∏Ïä§ Ï¢ÖÎ£å: PID $PID"
                                kill $PID
                            fi
                            rm app.pid
                        fi

                        nohup java -jar target/*.jar > app.log 2>&1 & echo $! > app.pid

                        echo "ÏÑúÎ≤Ñ Í∏∞Îèô ÎåÄÍ∏∞ Ï§ë..."
                        for i in $(seq 1 15); do
                            sleep 2
                            if curl -s -f http://localhost:8081/actuator/health | grep -q '"status":"UP"'; then
                                echo "‚úÖ ÏÑúÎ≤Ñ Í∏∞Îèô ÏÑ±Í≥µ"
                                exit 0
                            fi
                        done
                        echo "‚ùå ÏÑúÎ≤Ñ Í∏∞Îèô Ïã§Ìå®"
                        exit 1
                    '''
                }
            }
        }
    }
}